import { type FileItem } from '../types';

// This data now simulates a file list fetched from a shared QNAP folder.
// In a real scenario, this array would be generated by a backend API reading the file system.
const qnapMockFiles: FileItem[] = [
  { id: 1, name: 'Compressor Atlas-5 Manual.pdf', type: 'pdf' },
  { id: 2, name: 'Controller v3.1 Firmware.zip', type: 'zip' },
  { id: 3, name: 'Schematics Atlas-5 rev2.pdf', type: 'pdf' },
  { id: 4, name: 'Spare Parts List 2024.xlsx', type: 'xlsx' },
  { id: 5, name: 'Troubleshooting Guide Q1.docx', type: 'docx' },
  { id: 6, name: 'Installation Notes.txt', type: 'other' },
  { id: 7, name: 'Compressor Beta-2 Manual.pdf', type: 'pdf' },
  { id: 8, name: 'Safety Procedures.docx', type: 'docx' },
  { id: 9, name: 'Maintenance Log 2023.xlsx', type: 'xlsx' },
  { id: 10, name: 'Warranty Information.pdf', type: 'pdf' },
];

/**
 * Fetches a list of files from the QNAP API.
 * This is currently a simulation and will be replaced with a real API call.
 * The API will read a specific shared folder on the QNAP NAS.
 * @returns A promise that resolves with an array of FileItem objects.
 */
export const fetchFiles = (): Promise<FileItem[]> => {
  // Placeholder for the actual QNAP API endpoint.
  // Example: const QNAP_API_ENDPOINT = 'http://192.168.1.100/api/tech-docs';
  
  console.log("Simulating a request to the QNAP API to get the file list...");

  /*
    // --- REAL IMPLEMENTATION EXAMPLE ---
    //
    // async function fetchFromQNAP() {
    //   try {
    //     const response = await fetch(QNAP_API_ENDPOINT);
    //     if (!response.ok) {
    //       throw new Error(`QNAP API request failed with status ${response.status}`);
    //     }
    //     const files: FileItem[] = await response.json();
    //     console.log("Successfully fetched files from QNAP API.");
    //     return files;
    //   } catch (error) {
    //     console.error("Error fetching files from QNAP API:", error);
    //     throw error; // Propagate the error to the UI
    //   }
    // }
    // return fetchFromQNAP();
  */

  // --- SIMULATION LOGIC ---
  return new Promise((resolve, reject) => {
    // Simulate network latency for the API call
    setTimeout(() => {
      // Simulate a potential network error (e.g., QNAP is offline)
      if (Math.random() > 0.95) { // 5% chance of failure
        console.error('Simulated QNAP API error.');
        reject(new Error('Не вдалося підключитися до сервера QNAP.'));
      } else {
        console.log('QNAP API simulation successful. Returning mock file list.');
        resolve(qnapMockFiles);
      }
    }, 1200);
  });
};